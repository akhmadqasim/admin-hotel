// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String

  @@map("users")
}

model Member {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  nik          String        @unique
  name         String
  address      String?
  birthDate    DateTime
  birthPlace   String
  reservations Reservation[]

  @@map("members")
}

model Reservation {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  memberId    String        @db.ObjectId
  checkIn     DateTime
  checkOut    DateTime?
  roomNumber  String?
  price       Int?
  mealCost    MealCost[]
  laundryCost LaundryCost[]
  otherCost   otherCost[]

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model MealCost {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  reservationId String @db.ObjectId
  mealType      String
  mealCost      Int

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@map("meal_costs")
}

model LaundryCost {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  reservationId String @db.ObjectId
  laundryType   String
  laundryCost   Int

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@map("laundry_costs")
}

model otherCost {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  reservationId String @db.ObjectId
  costName      String
  costAmount    Int

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@map("other_costs")
}

model ErrorLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  stack     String
  createdAt DateTime @default(now())

  @@map("error_logs")
}
